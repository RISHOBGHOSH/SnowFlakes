
--CONSUMER_COMPLAINTS


CREATE DATABASE RS_INEURON_SNOWFLAKE;
USE DATABASE RS_INEURON_SNOWFLAKE;

CREATE OR REPLACE TABLE RS_INEURON_CONSUMER_COMPLAINTS
   (	
     DATE_RECEIVED STRING ,
      PRODUCT_NAME VARCHAR2(100) , 
	  SUB_PRODUCT VARCHAR2(100) , 
	  ISSUE VARCHAR2(100), 
      SUB_ISSUE VARCHAR2(100),
      CONSUMER_COMPLAINT_NARRATIVE VARCHAR2(10000),
      Company_Public_Response STRING,
      Company VARCHAR(100),
      State_Name CHAR(100),
      Zip_Code INT,
      Tags VARCHAR(100),
      Consumer_Consent_Provided CHAR(100),
       Submitted_via STRING,
      Date_Sent_to_Company STRING,
     Company_Response_to_Consumer VARCHAR(100),
     Timely_Response CHAR(100),
     CONSUMER_DISPUTED CHAR(100),
     COMPLAINT_ID NUMBER(12,0) NOT NULL PRIMARY KEY
);


SELECT * FROM RS_INEURON_CONSUMER_COMPLAINTS

SHOW COLUMNS IN RS_INEURON_CONSUMER_COMPLAINTS


--TASK

--Cosumer Loan
--Student Loan
--Payday Loan

--all Above 3 into single coulmn As loan_type
--And rest other As 'other_financ_serv'


SELECT *,
CASE
when PRODUCT_NAME IN ('Consumer Loam' ,'Student loan' , 'payday Loan') THEN 'CSP_LOAN'
ELSE 'OTHER_FINAN_SERV'
END AS LOAN_TYPE
FROM RS_INEURON_CONSUMER_COMPLAINTS


SELECT DISTINCT substring(date_received,7,12) FROM RS_INEURON_CONSUMER_COMPLAINTS


select distinct (extract(year from (to_date(date_received ,'dd-mm-yyyy')))) from RS_INEURON_CONSUMER_COMPLAINTS


--2013 - 2015
--1st jan 2013 - 31st dec 2013 - PPR12_PERIOD
--1st jan 2014 - 31st dec 2014 - PR12_PERIOD
--1st jan 2015 - 31st dec 2015 - R12_PERIOD
--name it TXN_PERIOD

SELECT *,
CASE
WHEN (to_date(date_received, 'DD-MM-YYYY'))>= '2013-01-01' AND (to_date(date_received,'DD-MM-YYYY'))>= '2013-12-01' THEN 'PPR12_PERIOD'
WHEN (to_date(date_received, 'DD-MM-YYYY'))>= '2014-01-01' AND (to_date(date_received,'DD-MM-YYYY'))>= '2014-12-01' THEN 'PR12_PERIOD'
WHEN (to_date(date_received, 'DD-MM-YYYY'))>= '2015-01-01' AND (to_date(date_received,'DD-MM-YYYY'))>= '2015-12-01' THEN 'R12_PERIOD'
END AS TXN_PERIOD
FROM RS_INEURON_CONSUMER_COMPLAINTS;



--OWNERS and PETS

USE DATABASE RS_INEURON_SNOWFLAKE;

CREATE OR REPLACE TABLE RS_OWNER
(
   OwnerID FLOAT NOT NULL PRIMARY KEY ,
   Name VARCHAR2(20),
   Surname STRING,
   StreetAddress VARCHAR2(50),
   City STRING,
   State CHAR(4),
   StateFull STRING,
   ZipCode INT
);

CREATE OR REPLACE TABLE RS_PETS
(
    PetID VARCHAR(10) NOT NULL PRIMARY KEY,
    Name VARCHAR(20),
    Kind STRING,
    Gender CHAR(7),
    Age STRING,
    OwnerID FLOAT NOT NULL REFERENCES RS_OWNER 
);


SELECT * FROM RS_OWNER

SELECT * FROM RS_PETS

SELECT * FROM OWNER; -- 89 ROWS
SELECT * FROM PETS;-- 100 ROWS

--SUBQUERY
SELECT * FROM OWNER WHERE OWNERID IN (SELECT DISTINCT OWNERID FROM PETS);

SELECT NAME,SURNAME FROM OWNER WHERE OWNERID NOT IN (SELECT DISTINCT OWNERID FROM PETS WHERE KIND = 'Dog');




-- UNION ALL
SELECT OWNERID,NAME FROM RS_OWNER
UNION ALL
SELECT OWNERID,NAME FROM RS_PETS;

--EXCEPT CLAUSE
SELECT OWNERID,NAME FROM OWNER
EXCEPT
SELECT OWNERID,NAME FROM PETS;

--INTERSECT
SELECT OWNERID,NAME FROM OWNER
INTERSECT
SELECT OWNERID,NAME FROM PETS;

SELECT COUNT(DISTINCT OwnerID) from OWNER;
SELECT COUNT(DISTINCT PetID) from PETS;

-- NEED THE NAME OF OWNER & THEIR DOGS NAME ALONG WITH THEIR AGE  ---- INNER JOIN
SELECT O.Name AS OWNER_NAME,p.NAME AS PET_NAME,p.age AS PET_AGE
FROM OWNER o
INNER JOIN PETS p ON o.OwnerID = p.OwnerID;

--NEED THE NAME OF ALL THE OWNERS IRRESPECTIVE WETHER OR NOT THEY ARE HAVING PETS 
SELECT O.Name AS OWNER_NAME,p.NAME AS PET_NAME,p.age AS PET_AGE
FROM OWNER o
LEFT OUTER JOIN PETS p ON o.OwnerID = p.OwnerID;

--- COUNT OF PETS EACH OWNER HAS
SELECT O.Name AS OWNER_NAME,COUNT(DISTINCT p.PETID)
FROM OWNER o
INNER JOIN PETS p ON o.OwnerID = p.OwnerID
GROUP BY 1
ORDER BY 2 DESC;

---RIGHT JOIN
SELECT O.Name AS OWNER_NAME,p.NAME AS PET_NAME,p.age AS PET_AGE
FROM OWNER o
RIGHT JOIN PETS p ON o.OwnerID = p.OwnerID;

--FULL OUTER JOIN
SELECT O.*,P.*
FROM OWNER O
FULL OUTER JOIN PETS p ON o.OwnerID = p.OwnerID;

-- INFO OF ALL THE PETS HOLD BY THEIR OWNER
SELECT DISTINCT KIND FROM PETS;
SELECT KIND,COUNT(*) FROM PETS
GROUP BY 1;

--- CROSS JOIN 
SELECT O.*,P.*
FROM OWNER O
CROSS JOIN PETS p ;















